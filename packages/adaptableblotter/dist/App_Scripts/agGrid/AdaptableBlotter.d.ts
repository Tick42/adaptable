import '../Styles/stylesheets/adaptableblotter-style.css';
import * as _ from 'lodash';
import { IAdaptableBlotter } from '../Api/Interface/IAdaptableBlotter';
import { IAdaptableBlotterStore } from '../Redux/Store/Interface/IAdaptableStore';
import { ICalendarService } from '../Utilities/Services/Interface/ICalendarService';
import { IValidationService } from '../Utilities/Services/Interface/IValidationService';
import { AuditLogService } from '../Utilities/Services/AuditLogService';
import { StyleService } from '../Utilities/Services/StyleService';
import { IChartService } from '../Utilities/Services/Interface/IChartService';
import { ICalculatedColumnExpressionService } from '../Utilities/Services/Interface/ICalculatedColumnExpressionService';
import { IFreeTextColumnService } from '../Utilities/Services/Interface/IFreeTextColumnService';
import { IEvent } from '../Api/Interface/IEvent';
import { EventDispatcher } from '../Utilities/EventDispatcher';
import { DistinctCriteriaPairValue } from '../Utilities/Enums';
import { IPPStyle } from '../Strategy/Interface/IExportStrategy';
import { IAdaptableStrategyCollection, ICellInfo, IVendorGridInfo } from '../Api/Interface/Interfaces';
import { IColumn } from '../Api/Interface/IColumn';
import { ICalculatedColumn, IGridSort, IFreeTextColumn, IPercentBar } from '../Api/Interface/IAdaptableBlotterObjects';
import { IBlotterApi } from '../Api/Interface/IBlotterApi';
import { IAdaptableBlotterOptions } from '../Api/Interface/IAdaptableBlotterOptions';
import { ISearchChangedEventArgs, IColumnStateChangedEventArgs, IStateChangedEventArgs } from '../Api/Interface/IStateEvents';
import { IRawValueDisplayValuePair } from '../View/UIInterfaces';
import { RowNode } from "ag-grid-community";
import { IDataService } from '../Utilities/Services/Interface/IDataService';
export declare class AdaptableBlotter implements IAdaptableBlotter {
    api: IBlotterApi;
    Strategies: IAdaptableStrategyCollection;
    AdaptableBlotterStore: IAdaptableBlotterStore;
    BlotterOptions: IAdaptableBlotterOptions;
    VendorGridName: any;
    CalendarService: ICalendarService;
    DataService: IDataService;
    ValidationService: IValidationService;
    AuditLogService: AuditLogService;
    StyleService: StyleService;
    ChartService: IChartService;
    CalculatedColumnExpressionService: ICalculatedColumnExpressionService;
    FreeTextColumnService: IFreeTextColumnService;
    private _calculatedColumnPathMap;
    private _flashingCellList;
    private abContainerElement;
    private gridOptions;
    EmbedColumnMenu: boolean;
    isInitialised: boolean;
    constructor(blotterOptions: IAdaptableBlotterOptions, renderGrid?: boolean);
    private getState;
    private createFilterWrapper;
    private createFloatingFilterWrapper;
    private _currentEditor;
    private _onKeyDown;
    onKeyDown(): IEvent<IAdaptableBlotter, KeyboardEvent | any>;
    private _onGridDataBound;
    onGridDataBound(): IEvent<IAdaptableBlotter, IAdaptableBlotter>;
    private _onSelectedCellsChanged;
    onSelectedCellsChanged(): IEvent<IAdaptableBlotter, IAdaptableBlotter>;
    private _onRefresh;
    onRefresh(): IEvent<IAdaptableBlotter, IAdaptableBlotter>;
    SearchedChanged: EventDispatcher<IAdaptableBlotter, ISearchChangedEventArgs>;
    StateChanged: EventDispatcher<IAdaptableBlotter, IStateChangedEventArgs>;
    ColumnStateChanged: EventDispatcher<IAdaptableBlotter, IColumnStateChangedEventArgs>;
    applyGridFiltering(): void;
    clearGridFiltering(): void;
    clearColumnFiltering(columnIds: string[]): void;
    hideFilterFormPopup: Function;
    hideFilterForm(): void;
    setNewColumnListOrder(VisibleColumnList: Array<IColumn>): void;
    debouncedSetColumnIntoStore: (() => void) & _.Cancelable;
    setColumnIntoStore(): void;
    private createColumn;
    private getQuickSearchClassName;
    private addQuickSearchStyleToColumn;
    createMenu(): void;
    getPrimaryKeyValueFromRecord(record: RowNode): any;
    gridHasCurrentEditValue(): boolean;
    getCurrentCellEditValue(): any;
    getActiveCell(): ICellInfo;
    debouncedSaveGridLayout: (() => void) & _.Cancelable;
    saveGridLayout(): void;
    debouncedSetSelectedCells: (() => void) & _.Cancelable;
    setSelectedCells(): void;
    private getColumnDataType;
    private getabColDefValue;
    setValue(cellInfo: ICellInfo): void;
    setValueBatch(batchValues: ICellInfo[]): void;
    cancelEdit(): void;
    getRecordIsSatisfiedFunction(id: any, distinctCriteria: DistinctCriteriaPairValue): (columnId: string) => any;
    getRecordIsSatisfiedFunctionFromRecord(record: RowNode, distinctCriteria: DistinctCriteriaPairValue): (columnId: string) => any;
    getColumnIndex(columnId: string): number;
    private isColumnReadonly;
    private isColumnSortable;
    private isColumnFilterable;
    setCustomSort(columnId: string, comparer: Function): void;
    removeCustomSort(columnId: string): void;
    getColumnValueDisplayValuePairDistinctList(columnId: string, distinctCriteria: DistinctCriteriaPairValue): Array<IRawValueDisplayValuePair>;
    private useRawValueForColumn;
    getDisplayValue(id: any, columnId: string): string;
    getDisplayValueFromRecord(row: RowNode, columnId: string): string;
    getDisplayValueFromRawValue(columnId: string, rawValue: any): any;
    private getRenderedValue;
    private cleanValue;
    getRawValueFromRecord(row: RowNode, columnId: string): any;
    setCellClassRules(cellClassRules: any, columnId: string, type: "ConditionalStyle" | "QuickSearch" | "FlashingCell" | "FormatColumn"): void;
    forAllRecordsDo(func: (record: any) => any): void;
    forAllVisibleRecordsDo(func: (record: any) => any): void;
    redraw(): void;
    refreshCells(rowNode: RowNode, columnIds: string[]): void;
    editCalculatedColumnInGrid(calculatedColumn: ICalculatedColumn): void;
    removeCalculatedColumnFromGrid(calculatedColumnID: string): void;
    addCalculatedColumnToGrid(calculatedColumn: ICalculatedColumn): void;
    addFreeTextColumnToGrid(freeTextColumn: IFreeTextColumn): void;
    private addSpecialColumnToState;
    isGroupRecord(record: any): boolean;
    getFirstRecord(): RowNode;
    destroy(): void;
    getIPPStyle(): IPPStyle;
    private initInternalGridLogic;
    addPercentBar(pcr: IPercentBar): void;
    removePercentBar(pcr: IPercentBar): void;
    editPercentBar(pcr: IPercentBar): void;
    private onSortChanged;
    getRowCount(): number;
    getColumnCount(): number;
    getVisibleRowCount(): number;
    getVisibleColumnCount(): number;
    selectColumn(columnId: string): void;
    setGridSort(gridSorts: IGridSort[]): void;
    setData(dataSource: any): void;
    private checkColumnsDataTypeSet;
    getVendorGridState(visibleCols: string[], forceFetch: boolean): IVendorGridInfo;
    setVendorGridState(vendorGridState: IVendorGridInfo): void;
    private setColumnVisible;
    private moveColumn;
    private setColumnState;
    isSelectable(): boolean;
    isSortable(): boolean;
    isFilterable(): boolean;
    isQuickFilterable(): boolean;
    isQuickFilterActive(): boolean;
    showQuickFilter(): void;
    hideQuickFilter(): void;
    applyLightTheme(): void;
    applyDarkTheme(): void;
    private applyFilteredColumnStyle;
    clearFlashingCellMap(): void;
    getOldFlashingCellValue(columnId: string, identifierValue: any, newValue: number, isUp: boolean): number;
    private getCellValuesForColumn;
}
