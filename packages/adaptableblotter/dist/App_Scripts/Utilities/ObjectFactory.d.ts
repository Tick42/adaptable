import { IRangeEvaluation } from './Helpers/ExpressionHelper';
import { IGridSort } from "./Interface/IGridSort";
import { IStyle } from "./Interface/IStyle";
import { IColumnCategory } from "./Interface/BlotterObjects/IColumnCategory";
import { IFormatColumn } from "./Interface/BlotterObjects/IFormatColumn";
import { ILayout } from "./Interface/BlotterObjects/ILayout";
import { IPlusMinusRule } from "./Interface/BlotterObjects/IPlusMinusRule";
import { IShortcut } from "./Interface/BlotterObjects/IShortcut";
import { IUserFilter } from "./Interface/BlotterObjects/IUserFilter";
import { IPercentBar } from "./Interface/BlotterObjects/IPercentBar";
import { IFreeTextColumn } from "./Interface/BlotterObjects/IFreeTextColumn";
import { IReport } from "./Interface/BlotterObjects/IReport";
import { IFlashingCell } from "./Interface/BlotterObjects/IFlashingCell";
import { ICustomSort } from "./Interface/BlotterObjects/ICustomSort";
import { IConditionalStyle } from "./Interface/BlotterObjects/IConditionalStyle";
import { IColumnFilter } from "./Interface/BlotterObjects/IColumnFilter";
import { ICellValidationRule } from "./Interface/BlotterObjects/ICellValidationRule";
import { ICalculatedColumn } from "./Interface/BlotterObjects/ICalculatedColumn";
import { IAdvancedSearch } from "./Interface/BlotterObjects/IAdvancedSearch";
import { ICategoryChartDefinition } from "./Interface/BlotterObjects/IChartDefinition";
import { IAlertDefinition } from "./Interface/BlotterObjects/IAlertDefinition";
import { IRange } from "./Interface/Expression/IRange";
import { LeafExpressionOperator, RangeOperandType, ActionMode, LicenceScopeType, LicenceUserType } from './Enums';
import { IColumn } from './Interface/IColumn';
import { IAdaptableBlotter } from './Interface/IAdaptableBlotter';
import { ICellSummmary } from "./Interface/SelectedCell/ICellSummmary";
import { Expression } from '../Utilities/Expression';
import { IVendorGridInfo } from "./Interface/IVendorGridInfo";
import { ILicenceInfo } from './Interface/ILicenceInfo';
export declare module ObjectFactory {
    function CreateLicenceInfo(licenceType: LicenceScopeType, isLicenceInDate: boolean, licenceUserType: LicenceUserType, expiryDate: Date): ILicenceInfo;
    function CreateEmptyCustomSort(): ICustomSort;
    function CreateEmptyCategoryChartDefinition(): ICategoryChartDefinition;
    function CreateEmptyCalculatedColumn(): ICalculatedColumn;
    function CreateEmptyPlusMinusRule(): IPlusMinusRule;
    function CreateEmptyAlertDefinition(): IAlertDefinition;
    function CreateEmptyAdvancedSearch(): IAdvancedSearch;
    function CreateEmptyColumnCategory(): IColumnCategory;
    function CreateEmptyRange(): IRange;
    function CreateEmptyGridSort(): IGridSort;
    function CreateEmptyCellValidation(): ICellValidationRule;
    function CreateEmptyPercentBar(): IPercentBar;
    function CreateEmptyUserFilter(): IUserFilter;
    function CreateEmptyReport(): IReport;
    function CreateDefaultFlashingCell(column: IColumn, upColor: string, downColor: string, duration: number): IFlashingCell;
    function CreateEmptyShortcut(): IShortcut;
    function CreateCellValidationMessage(CellValidation: ICellValidationRule, blotter: IAdaptableBlotter): string;
    function CreateEmptyConditionalStyle(): IConditionalStyle;
    function CreateEmptyFormatColumn(): IFormatColumn;
    function CreateEmptyFreeTextColumn(): IFreeTextColumn;
    function CreateLayout(columns: IColumn[], gridSorts: IGridSort[], vendorGridInfo: IVendorGridInfo, name: string): ILayout;
    function CreateColumnFilter(columnId: string, expression: Expression): IColumnFilter;
    function CreateColumnFilterFromUserFilter(userFilter: IUserFilter): IColumnFilter;
    function CreateUserFilterFromColumnFilter(columnFilter: IColumnFilter, name: string): IUserFilter;
    function CreateRange(operator: LeafExpressionOperator, operand1: any, operand2: any, rangeOperandType: RangeOperandType, rangeOperandType2: RangeOperandType): IRange;
    function CreateRangeEvaluation(operator: LeafExpressionOperator, operand1: any, operand2: any, newValue: any, initialValue: any, columnId: string): IRangeEvaluation;
    function CreateCellValidationRule(columnId: string, range: IRange, actionMode: ActionMode, expression: Expression): ICellValidationRule;
    function CreateEmptyStyle(): IStyle;
    function CreateEmptyCellSummmary(): ICellSummmary;
}
