import { IAdaptableBlotter } from "../Interface/IAdaptableBlotter";
import { IEvent } from "../Interface/IEvent";
import { IBlotterApi } from "./Interface/IBlotterApi";
import { ISearchChangedEventArgs, IColumnStateChangedEventArgs } from "./Interface/ServerSearch";
import { ILayout, IAdvancedSearch, IStyle, ICustomSort, IColumnFilter, IUserFilter, IUserTheme, IShortcut, ICalculatedColumn, ICellValidationRule, IFormatColumn, IReport } from "./Interface/AdaptableBlotterObjects";
import { IEntitlement } from "../Interface/Interfaces";
import { ExportDestination } from "../Enums";
import { AdaptableBlotterState } from "../../Redux/Store/Interface/IAdaptableStore";
import { ILiveReport } from "../../Strategy/Interface/IExportStrategy";
export declare abstract class BlotterApiBase implements IBlotterApi {
    protected blotter: IAdaptableBlotter;
    constructor(blotter: IAdaptableBlotter);
    setGridData(dataSource: any): void;
    layoutSet(layoutName: string): void;
    layoutClear(): void;
    layoutGetCurrent(): ILayout;
    layoutgetAll(): ILayout[];
    layoutSave(): void;
    dashboardSetAvailableToolbars(availableToolbars: string[]): void;
    dashboardSetVisibleToolbars(visibleToolbars: string[]): void;
    dashboardShowToolbar(visibleToolbar: string): void;
    dashboardHideToolbar(visibleToolbar: string): void;
    dashboardSetVisibleButtons(functionButtons: string[]): void;
    dashboardSetZoom(zoom: Number): void;
    dashboardSetVisibility(dashboardVisibility: 'Minimised' | 'Visible' | 'Hidden'): void;
    dashboardShow(): void;
    dashboardHide(): void;
    dashboardMinimise(): void;
    dashboardShowSystemStatusButton(): void;
    dashboardHideSystemStatusButton(): void;
    dashboardShowFunctionsDropdown(): void;
    dashboardHideFunctionsDropdown(): void;
    dashboardShowColumnsDropdown(): void;
    dashboardHideColumnsDropdown(): void;
    dashboardSetHomeToolbarTitle(title: string): void;
    quickSearchRun(quickSearchText: string): void;
    quickSearchClear(): void;
    quickSearchGetValue(): string;
    quickSearchSetOperator(operator: 'Contains' | 'StartsWith'): void;
    quickSearchSetDisplayAction(displayAction: 'HighlightCell' | 'ShowRow' | 'ShowRowAndHighlightCell'): void;
    quickSearchSetStyle(style: IStyle): void;
    calendarSetCurrent(calendar: string): void;
    calendarGetCurrent(): string;
    themeSetCurrent(theme: string): void;
    themeGetCurrent(): string;
    themeSetSystemThemes(systemThemes: string[]): void;
    themeSetUserThemes(userThemes: string[]): void;
    themeSystemThemeGetAll(): string[];
    themeUserThemeGetAll(): IUserTheme[];
    shortcutGetAll(): IShortcut[];
    shortcutAdd(shortcut: IShortcut): void;
    shortcutDelete(shortcut: IShortcut): void;
    shortcutDeleteAll(): void;
    smartEditSetMathOperation(mathOperation: 'Add' | 'Subtract' | 'Multiply' | 'Divide' | 'Replace'): void;
    smartEditGetMathOperation(): string;
    smartEditSetValue(smartEditValue: number): void;
    smartEditGetValue(): number;
    uiSetColorPalette(colorPalette: string[]): void;
    uiAddColorsToPalette(colorPalette: string[]): void;
    uiAddStyleClassNames(styleClassNames: string[]): void;
    uiSetColumnPermittedValues(column: string, permittedValues: string[]): void;
    uiClearColumnPermittedValues(column: string): void;
    columnFilterSet(columnFilters: IColumnFilter[]): void;
    columnFilterSetUserFilter(userFilter: string): void;
    columnFilterClear(columnFilter: IColumnFilter): void;
    columnFilterClearByColumns(columns: string[]): void;
    columnFilterClearByColumn(column: string): void;
    columnFilterClearAll(): void;
    columnFiltersGetCurrent(): IColumnFilter[];
    userFilterSet(userFilters: IUserFilter[]): void;
    systemFilterSet(systemFilters: string[]): void;
    systemFilterClear(): void;
    systemFilterGetCurrent(): string[];
    systemFilterGetAll(): string[];
    dataSourceSet(dataSourceName: string): void;
    dataSourceClear(): void;
    advancedSearchSet(advancedSearchName: string): void;
    advancedSearchClear(): void;
    advancedSearchAdd(advancedSearch: IAdvancedSearch): void;
    advancedSearchEdit(advancedSearchName: string, advancedSearch: IAdvancedSearch): void;
    advancedSearchDelete(advancedSearchName: string): void;
    advancedSearchGetCurrent(): IAdvancedSearch;
    advancedSearchGetByName(advancedSearchName: string): IAdvancedSearch;
    advancedSearchGetAll(): IAdvancedSearch[];
    entitlementGetAll(): IEntitlement[];
    entitlementGetByFunction(functionName: string): IEntitlement;
    entitlementGetAccessLevelForFunction(functionName: string): string;
    entitlementAddOrUpdate(functionName: string, accessLevel: "ReadOnly" | "Hidden" | "Default"): void;
    entitlementDelete(functionName: string): void;
    customSortGetAll(): ICustomSort[];
    customSortGetByColumn(columnn: string): ICustomSort;
    customSortAdd(column: string, values: string[]): void;
    customSortEdit(column: string, values: string[]): void;
    customSortDelete(column: string): void;
    calculatedColumnGetAll(): ICalculatedColumn[];
    calculatedColumnAdd(calculatedColumn: ICalculatedColumn): void;
    calculatedColumnEditExpression(column: string, columnExpression: string): void;
    calculatedColumnDelete(column: string): void;
    cellValidationGetAll(): ICellValidationRule[];
    cellValidationAdd(cellValidationRule: ICellValidationRule): void;
    cellValidationDelete(cellValidationRule: ICellValidationRule): void;
    formatColumnGetAll(): IFormatColumn[];
    formatColumnnAdd(column: string, style: IStyle): void;
    formatColumnnUpdate(column: string, style: IStyle): void;
    formatColumnDelete(formatColumn: IFormatColumn): void;
    formatColumnDeleteAll(): void;
    configClear(): void;
    configGet(): AdaptableBlotterState;
    systemStatusSet(statusMessage: string, statusColour: "Red" | "Amber" | "Green"): void;
    systemStatusSetRed(statusMessage: string): void;
    systemStatusSetAmber(statusMessage: string): void;
    systemStatusSetGreen(statusMessage: string): void;
    systemStatusClear(): void;
    alertShow(alertHeader: string, alertMessage: string, MessageType: "Info" | "Warning" | "Error", showAsPopup: boolean): void;
    alertShowMessage(alertHeader: string, alertMessage: string, showAsPopup: boolean): void;
    alertShowWarning(alertHeader: string, alertMessage: string, showAsPopup: boolean): void;
    alertShowError(alertHeader: string, alertMessage: string, showAsPopup: boolean): void;
    exportSendReport(reportName: string, destination: ExportDestination): void;
    exportReportsGetAll(): IReport[];
    exportLiveReportsGetAll(): ILiveReport[];
    onSearchedChanged(): IEvent<IAdaptableBlotter, ISearchChangedEventArgs>;
    onColumnStateChanged(): IEvent<IAdaptableBlotter, IColumnStateChangedEventArgs>;
    private dispatchAction;
    private checkItemExists;
}
