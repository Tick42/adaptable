{"version":3,"sources":["ng://adaptableblotter-angular/lib/adaptableblotter.component.ts","ng://adaptableblotter-angular/lib/adaptableblotter-aggrid.component.ts","ng://adaptableblotter-angular/lib/adaptableblotter-hypergrid.component.ts","ng://adaptableblotter-angular/lib/adaptableblotter.module.ts"],"names":["AdaptableBlotterComponent","elRef","this","EventEmitter","prototype","ngOnInit","_this","adaptableBlotterOptions","adaptableBlotterContainer","Math","random","waitForContainer","setInterval","document","getElementById","adaptableBlotter","BlotterFactory","CreateAdaptableBlotter","vendorGridName","adaptableBlotterMounted","emit","ReactDOM.render","AdaptableBlotterApp","AdaptableBlotter","nativeElement","firstChild","clearInterval","e","Component","args","selector","template","ElementRef","Input","Output","AdaptableblotterAgGridComponent","width","height","position","margin","agGridClass","agTheme","AdaptableblotterHyperGridComponent","container","lastChild","grid","Hypergrid","gridOptions","data","setData","vendorGrid","gridLoaded","gridMounted","setupgrid","ngOnChanges","changes","hgOptionsChange","dataChange","previousValue","currentValue","isFirstChange","onAdaptableBlotterMount","AdaptableBlotterModule","NgModule","imports","CommonModule","AgGridModule","withComponents","declarations","exports"],"mappings":"8uBAAA,IAAAA,EAAA,WAmBE,SAAAA,EAAoBC,GAAAC,KAAAD,MAAAA,+BAJgB,IAAIE,EAAAA,oBAMxCH,EAAAI,UAAAC,SAAA,WAAA,IAAAC,EAAAJ,KACEA,KAAKK,wBAAwBC,0BAC3BN,KAAKK,wBAAwBC,2BAA6B,qBAAoC,IAAhBC,KAAKC,SAAmB,GACxG,IAAMC,EAAmBC,YAAY,WACnC,IACEC,SAASC,eAAeR,EAAKC,wBAAwBC,2BAErDF,EAAKS,iBAAmBC,EAAAA,eAAeC,uBACrCX,EAAKC,wBACLD,EAAKY,gBAEPZ,EAAKa,wBAAwBC,KAAKd,EAAKS,kBACvCM,EAAAA,OACEC,EAAAA,oBAAoB,CAAEC,iBAAkBjB,EAAKS,mBAC7CT,EAAKL,MAAMuB,cAAcC,YAE3BC,cAAcf,GACd,MAAOgB,MAER,0BAlCNC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,oBACVC,SAAU,8HARuBC,EAAAA,+DAYhCC,EAAAA,8BACAA,EAAAA,uCAEAC,EAAAA,YAfH,GCAAC,EAAA,WA+BE,SAAAA,iBALqG,yBACzE,CAAEC,MAAO,OAAQC,OAAQ,MAAOC,SAAU,WAAYC,OAAQ,cAM1FJ,EAAA/B,UAAAC,SAAA,WACEH,KAAKsC,YAAc,YAAYtC,KAAKuC,6BA7BvCb,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,2BACVC,SAAU,ghBAiBTE,EAAAA,2BACAA,EAAAA,uBACAA,EAAAA,0BACAA,EAAAA,WA3BH,GCAAS,EAAA,WAgCE,SAAAA,EAAoBzC,GAAAC,KAAAD,MAAAA,mBAXP,mBAGgB,aACA,oBAKL,IAAIE,EAAAA,oBAI5BuC,EAAAtC,UAAAC,SAAA,WACE,IAAMsC,EAAYzC,KAAKD,MAAMuB,cAAcC,WAAWmB,UACtD1C,KAAK2C,KAAO,IAAIC,EAAUH,EAAWzC,KAAK6C,aACrC7C,KAAK6C,YAAYC,MACpB9C,KAAK2C,KAAKI,QAAQ/C,KAAK8C,MAEzB9C,KAAKK,wBAAwB2C,WAAahD,KAAK2C,KAC/C3C,KAAKiD,YAAa,EAClBjD,KAAKkD,YAAYhC,KAAKlB,KAAK2C,MAE3B3C,KAAK6C,YAAYM,UAAUnD,KAAKK,wBAAwB2C,aAO1DR,EAAAtC,UAAAkD,YAAA,SAAYC,GACV,GAAKrD,KAAK2C,KAAV,CACA,IAAMW,EAAkBD,EAAO,YACzBE,EAAaF,EAAO,KACtBE,GAAcA,EAAWC,gBAAkBD,EAAWE,cACxDzD,KAAK2C,KAAKI,QAAQM,EAAO,KAAMI,cAE7BH,IAAoBA,EAAgBI,iBACrCJ,EAAgBE,gBAAkBF,EAAgBG,cAEnDzD,KAAKG,aAITqC,EAAAtC,UAAAyD,wBAAA,SAAwB9C,yBA5DzBa,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,8BACVC,SAAU,uaAPuBC,EAAAA,+DAuBhCC,EAAAA,2BACAA,EAAAA,oBACAA,EAAAA,2BAKAC,EAAAA,YA9BH,GCAA4B,EAAA,oDAOCC,EAAAA,SAAQlC,KAAA,CAAC,CACRmC,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,eAAe,KAE9BC,aAAc,CACZpE,EACAmC,EACAO,GAEF2B,QAAS,CACPrE,EACAmC,EACAO,SApBJ","sourcesContent":["import { Component, OnInit, Input, ElementRef, Output, EventEmitter } from '@angular/core';\r\n\r\nimport * as ReactDOM from 'adaptableblotter/node_modules/react-dom';\r\nimport { BlotterFactory, AdaptableBlotterApp } from 'adaptableblotter/factory';\r\nimport { IAdaptableBlotter, IAdaptableBlotterOptions } from 'adaptableblotter/types';\r\n\r\n@Component({\r\n  selector: 'adaptable-blotter',\r\n  template: `<div [id]=\"adaptableBlotterOptions.adaptableBlotterContainer\">Loading...</div>`,\r\n  styles: []\r\n})\r\nexport class AdaptableBlotterComponent implements OnInit {\r\n  @Input() adaptableBlotterOptions: IAdaptableBlotterOptions;\r\n  @Input() vendorGridName: 'agGrid' | 'Hypergrid' | 'Kendo' | 'AdaptableGrid';\r\n\r\n  @Output() adaptableBlotterMounted = new EventEmitter<any>();\r\n\r\n  private adaptableBlotter: IAdaptableBlotter;\r\n\r\n  constructor(private elRef: ElementRef) {}\r\n\r\n  ngOnInit() {\r\n    this.adaptableBlotterOptions.adaptableBlotterContainer =\r\n      this.adaptableBlotterOptions.adaptableBlotterContainer || `adaptableBlotter-${Math.random() * 10000 | 0}`;\r\n    const waitForContainer = setInterval(() => {\r\n      try {\r\n        document.getElementById(this.adaptableBlotterOptions.adaptableBlotterContainer);\r\n        // Element is mounted\r\n        this.adaptableBlotter = BlotterFactory.CreateAdaptableBlotter(\r\n          this.adaptableBlotterOptions,\r\n          this.vendorGridName\r\n        );\r\n        this.adaptableBlotterMounted.emit(this.adaptableBlotter);\r\n        ReactDOM.render(\r\n          AdaptableBlotterApp({ AdaptableBlotter: this.adaptableBlotter }),\r\n          this.elRef.nativeElement.firstChild,\r\n        );\r\n        clearInterval(waitForContainer);\r\n      } catch (e) {\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { IAdaptableBlotterOptions } from 'adaptableblotter/types';\r\nimport { GridOptions } from 'ag-grid';\r\nimport 'ag-grid-enterprise';\r\n\r\n@Component({\r\n  selector: 'adaptable-blotter-aggrid',\r\n  template: `<div id=\"adaptableBlotter-angular-aggrid\">\r\n    <div id=\"adaptableBlotter\">\r\n      <adaptable-blotter\r\n        [adaptableBlotterOptions]=\"adaptableBlotterOptions\"\r\n        vendorGridName=\"agGrid\">\r\n      </adaptable-blotter>\r\n    </div>\r\n    <div id=\"grid\">\r\n      <ag-grid-angular\r\n        [gridOptions]=\"gridOptions\"\r\n        [className]=\"agGridClass\"\r\n        [ngStyle]=\"agDivStyle\">\r\n      </ag-grid-angular>\r\n    </div>\r\n  </div>`,\r\n})\r\nexport class AdaptableblotterAgGridComponent implements OnInit {\r\n  @Input() adaptableBlotterOptions: IAdaptableBlotterOptions;\r\n  @Input() gridOptions: GridOptions;\r\n  @Input() agTheme?: 'balham' | 'balham-dark' | 'material' | 'fresh' | 'dark' | 'blue' | 'bootstrap' = 'balham';\r\n  @Input() agDivStyle?: any = { width: '100%', height: '90%', position: 'absolute', margin: '0px' };\r\n\r\n  agGridClass: string;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.agGridClass = `ag-theme-${this.agTheme}`;\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, ElementRef, SimpleChanges, OnChanges, Output, EventEmitter } from '@angular/core';\r\nimport { IAdaptableBlotterOptions } from 'adaptableblotter/types';\r\nimport Hypergrid from 'fin-hypergrid';\r\n\r\n\r\n@Component({\r\n  selector: 'adaptable-blotter-hypergrid',\r\n  template: `<div id=\"adaptableBlotter-angular-hypergrid\">\r\n  <div id=\"adaptableBlotter\">\r\n    <adaptable-blotter\r\n      [adaptableBlotterOptions]=\"adaptableBlotterOptions\"\r\n      vendorGridName=\"Hypergrid\"\r\n      (adaptableBlotterMounted)=\"onAdaptableBlotterMount($event)\"\r\n      *ngIf=\"gridLoaded\">\r\n    </adaptable-blotter>\r\n  </div>\r\n    <div id=\"hypergrid-container\"></div>\r\n  </div>`,\r\n})\r\nexport class AdaptableblotterHyperGridComponent implements OnInit, OnChanges {\r\n  private grid;\r\n  gridLoaded = false;\r\n\r\n  @Input() adaptableBlotterOptions: IAdaptableBlotterOptions;\r\n  @Input() gridOptions?: any = {};\r\n  @Input() data?: Array<any> = [];\r\n\r\n  /**\r\n   * Emits the mounted Hypergrid object for any specific settings.\r\n   */\r\n  @Output() gridMounted = new EventEmitter<any>();\r\n\r\n  constructor(private elRef: ElementRef) { }\r\n\r\n  ngOnInit() {\r\n    const container = this.elRef.nativeElement.firstChild.lastChild;\r\n    this.grid = new Hypergrid(container, this.gridOptions);\r\n    if (!this.gridOptions.data) {\r\n      this.grid.setData(this.data);\r\n    }\r\n    this.adaptableBlotterOptions.vendorGrid = this.grid;\r\n    this.gridLoaded = true;\r\n    this.gridMounted.emit(this.grid);\r\n    // TODO: Fix so it works properly - its a temporayr way to marry up the 2 components\r\n    this.gridOptions.setupgrid(this.adaptableBlotterOptions.vendorGrid);\r\n  }\r\n\r\n  /**\r\n   * Update the grid on input changes.\r\n   * Need our own update logic since hypergrid doesn't have an Angular wrapper.\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.grid) { return; }\r\n    const hgOptionsChange = changes.gridOptions;\r\n    const dataChange = changes.data;\r\n    if (dataChange && dataChange.previousValue !== dataChange.currentValue) {\r\n      this.grid.setData(changes.data.currentValue);\r\n    }\r\n    if (hgOptionsChange && !hgOptionsChange.isFirstChange() &&\r\n      (hgOptionsChange.previousValue !== hgOptionsChange.currentValue)) {\r\n      // Init the grid again, options changed\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  onAdaptableBlotterMount(adaptableBlotter) {\r\n   // ToDO\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AdaptableBlotterComponent } from './adaptableblotter.component';\r\nimport { AdaptableblotterAgGridComponent } from './adaptableblotter-aggrid.component';\r\nimport { AdaptableblotterHyperGridComponent } from './adaptableblotter-hypergrid.component';\r\nimport { AgGridModule } from 'ag-grid-angular';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    AgGridModule.withComponents([])\r\n  ],\r\n  declarations: [\r\n    AdaptableBlotterComponent,\r\n    AdaptableblotterAgGridComponent,\r\n    AdaptableblotterHyperGridComponent,\r\n  ],\r\n  exports: [\r\n    AdaptableBlotterComponent,\r\n    AdaptableblotterAgGridComponent,\r\n    AdaptableblotterHyperGridComponent,\r\n  ]\r\n})\r\nexport class AdaptableBlotterModule { }\r\n"]}