{"version":3,"file":"adaptableblotter-angular.js.map","sources":["ng://adaptableblotter-angular/lib/adaptableblotter.component.ts","ng://adaptableblotter-angular/lib/adaptableblotter-aggrid.component.ts","ng://adaptableblotter-angular/lib/adaptableblotter-hypergrid.component.ts","ng://adaptableblotter-angular/lib/adaptableblotter.module.ts"],"sourcesContent":["import { Component, OnInit, Input, ElementRef, Output, EventEmitter } from '@angular/core';\r\n\r\nimport * as ReactDOM from 'adaptableblotter/node_modules/react-dom';\r\nimport { BlotterFactory, AdaptableBlotterApp } from 'adaptableblotter/factory';\r\nimport { IAdaptableBlotter, IAdaptableBlotterOptions } from 'adaptableblotter/types';\r\n\r\n@Component({\r\n  selector: 'adaptable-blotter',\r\n  template: `<div [id]=\"adaptableBlotterOptions.adaptableBlotterContainer\">Loading...</div>`,\r\n  styles: []\r\n})\r\nexport class AdaptableBlotterComponent implements OnInit {\r\n  @Input() adaptableBlotterOptions: IAdaptableBlotterOptions;\r\n  @Input() vendorGridName: 'agGrid' | 'Hypergrid' | 'Kendo' | 'AdaptableGrid';\r\n\r\n  @Output() adaptableBlotterMounted = new EventEmitter<any>();\r\n\r\n  private adaptableBlotter: IAdaptableBlotter;\r\n\r\n  constructor(private elRef: ElementRef) {}\r\n\r\n  ngOnInit() {\r\n    this.adaptableBlotterOptions.adaptableBlotterContainer =\r\n      this.adaptableBlotterOptions.adaptableBlotterContainer || `adaptableBlotter-${Math.random() * 10000 | 0}`;\r\n    const waitForContainer = setInterval(() => {\r\n      try {\r\n        document.getElementById(this.adaptableBlotterOptions.adaptableBlotterContainer);\r\n        // Element is mounted\r\n        this.adaptableBlotter = BlotterFactory.CreateAdaptableBlotter(\r\n          this.adaptableBlotterOptions,\r\n          this.vendorGridName\r\n        );\r\n        this.adaptableBlotterMounted.emit(this.adaptableBlotter);\r\n        ReactDOM.render(\r\n          AdaptableBlotterApp({ AdaptableBlotter: this.adaptableBlotter }),\r\n          this.elRef.nativeElement.firstChild,\r\n        );\r\n        clearInterval(waitForContainer);\r\n      } catch (e) {\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { IAdaptableBlotterOptions } from 'adaptableblotter/types';\r\nimport { GridOptions } from 'ag-grid';\r\nimport 'ag-grid-enterprise';\r\n\r\n@Component({\r\n  selector: 'adaptable-blotter-aggrid',\r\n  template: `<div id=\"adaptableBlotter-angular-aggrid\">\r\n    <div id=\"adaptableBlotter\">\r\n      <adaptable-blotter\r\n        [adaptableBlotterOptions]=\"adaptableBlotterOptions\"\r\n        vendorGridName=\"agGrid\">\r\n      </adaptable-blotter>\r\n    </div>\r\n    <div id=\"grid\">\r\n      <ag-grid-angular\r\n        [gridOptions]=\"gridOptions\"\r\n        [className]=\"agGridClass\"\r\n        [ngStyle]=\"agDivStyle\">\r\n      </ag-grid-angular>\r\n    </div>\r\n  </div>`,\r\n})\r\nexport class AdaptableblotterAgGridComponent implements OnInit {\r\n  @Input() adaptableBlotterOptions: IAdaptableBlotterOptions;\r\n  @Input() gridOptions: GridOptions;\r\n  @Input() agTheme?: 'balham' | 'balham-dark' | 'material' | 'fresh' | 'dark' | 'blue' | 'bootstrap' = 'balham';\r\n  @Input() agDivStyle?: any = { width: '100%', height: '90%', position: 'absolute', margin: '0px' };\r\n\r\n  agGridClass: string;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.agGridClass = `ag-theme-${this.agTheme}`;\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, ElementRef, SimpleChanges, OnChanges, Output, EventEmitter } from '@angular/core';\r\nimport { IAdaptableBlotterOptions } from 'adaptableblotter/types';\r\nimport Hypergrid from 'fin-hypergrid';\r\n\r\n\r\n@Component({\r\n  selector: 'adaptable-blotter-hypergrid',\r\n  template: `<div id=\"adaptableBlotter-angular-hypergrid\">\r\n  <div id=\"adaptableBlotter\">\r\n    <adaptable-blotter\r\n      [adaptableBlotterOptions]=\"adaptableBlotterOptions\"\r\n      vendorGridName=\"Hypergrid\"\r\n      (adaptableBlotterMounted)=\"onAdaptableBlotterMount($event)\"\r\n      *ngIf=\"gridLoaded\">\r\n    </adaptable-blotter>\r\n  </div>\r\n    <div id=\"hypergrid-container\"></div>\r\n  </div>`,\r\n})\r\nexport class AdaptableblotterHyperGridComponent implements OnInit, OnChanges {\r\n  private grid;\r\n  gridLoaded = false;\r\n\r\n  @Input() adaptableBlotterOptions: IAdaptableBlotterOptions;\r\n  @Input() gridOptions?: any = {};\r\n  @Input() data?: Array<any> = [];\r\n\r\n  /**\r\n   * Emits the mounted Hypergrid object for any specific settings.\r\n   */\r\n  @Output() gridMounted = new EventEmitter<any>();\r\n\r\n  constructor(private elRef: ElementRef) { }\r\n\r\n  ngOnInit() {\r\n    const container = this.elRef.nativeElement.firstChild.lastChild;\r\n    this.grid = new Hypergrid(container, this.gridOptions);\r\n    if (!this.gridOptions.data) {\r\n      this.grid.setData(this.data);\r\n    }\r\n    this.adaptableBlotterOptions.vendorGrid = this.grid;\r\n    this.gridLoaded = true;\r\n    this.gridMounted.emit(this.grid);\r\n    // TODO: Fix so it works properly - its a temporayr way to marry up the 2 components\r\n    this.gridOptions.setupgrid(this.adaptableBlotterOptions.vendorGrid);\r\n  }\r\n\r\n  /**\r\n   * Update the grid on input changes.\r\n   * Need our own update logic since hypergrid doesn't have an Angular wrapper.\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.grid) { return; }\r\n    const hgOptionsChange = changes.gridOptions;\r\n    const dataChange = changes.data;\r\n    if (dataChange && dataChange.previousValue !== dataChange.currentValue) {\r\n      this.grid.setData(changes.data.currentValue);\r\n    }\r\n    if (hgOptionsChange && !hgOptionsChange.isFirstChange() &&\r\n      (hgOptionsChange.previousValue !== hgOptionsChange.currentValue)) {\r\n      // Init the grid again, options changed\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  onAdaptableBlotterMount(adaptableBlotter) {\r\n   // ToDO\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AdaptableBlotterComponent } from './adaptableblotter.component';\r\nimport { AdaptableblotterAgGridComponent } from './adaptableblotter-aggrid.component';\r\nimport { AdaptableblotterHyperGridComponent } from './adaptableblotter-hypergrid.component';\r\nimport { AgGridModule } from 'ag-grid-angular';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    AgGridModule.withComponents([])\r\n  ],\r\n  declarations: [\r\n    AdaptableBlotterComponent,\r\n    AdaptableblotterAgGridComponent,\r\n    AdaptableblotterHyperGridComponent,\r\n  ],\r\n  exports: [\r\n    AdaptableBlotterComponent,\r\n    AdaptableblotterAgGridComponent,\r\n    AdaptableblotterHyperGridComponent,\r\n  ]\r\n})\r\nexport class AdaptableBlotterModule { }\r\n"],"names":["ReactDOM.render"],"mappings":"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"}
